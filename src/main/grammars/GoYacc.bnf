{
    parserClass="idea.goyacc.ast.GoYaccParser"
    generate=[element-case="lower"]

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="GoYacc"
    psiPackage="idea.goyacc.psi"
    psiImplClassSuffix="Impl"
    psiImplPackage="idea.goyacc.psi.impl"
    //psiImplUtilClass="idea.goyacc.psi.GoYaccPsiUtil"

    elementTypeHolderClass="idea.goyacc.psi.GoYaccType"
    elementTypeFactory="idea.goyacc.psi.GoYaccTypeFactory.newElementType"
    tokenTypeFactory="idea.goyacc.psi.GoYaccTypeFactory.newTokenType"
}


spec ::= decl_list rule_list tail_code?


decl_list ::= (elem_decl | misc_decl)*

elem_decl ::= reserved_word tag? elem_list? {
    pin=1 recoverWhile=decl_recover
}
misc_decl ::= START IDENT | ERROR_VERBOSE | LCURL GO_CODE RCURL | UNION BEGIN GO_CODE END {
    pin=1 recoverWhile=decl_recover
}
private decl_recover ::= !(reserved_word | START | LCURL | UNION | ERROR_VERBOSE | START_RULES)

reserved_word ::= TOKEN | LEFT | RIGHT | NONASSOC | TYPE | PRECEDENCE

tag ::= '<' IDENT '>' {
    pin=1 recoverWhile=tag_recover
}
private tag_recover ::= !(IDENT | reserved_word | START | LCURL | UNION | ERROR_VERBOSE | START_RULES)

elem ::= IDENT NUM_LIT? STR_LIT? {
    pin=1 recoverWhile=elem_recover //methods=[getElemName getElemAlias]
}
private elem_list ::= elem+ | elem (',' elem)*
private elem_recover ::= !(',' | IDENT | reserved_word | START | LCURL | UNION | ERROR_VERBOSE | START_RULES)


rule_list ::= START_RULES rule+ {pin=1}

rule ::= C_IDENT ':' rule_alt ('|' rule_alt)* ';'? {
    pin=2 recoverWhile=rule_recover
}
rule_alt ::= rule_elem* rule_prec? {recoverWhile=rule_alt_recover}
private rule_recover ::= !(C_IDENT|START_TAIL)
private rule_alt_recover ::= !(';' | '|' | C_IDENT | START_TAIL)

rule_elem ::= IDENT | STR_LIT | action
rule_prec ::= PREC IDENT action? {pin=2}
action ::= BEGIN GO_CODE END {pin=1 recoverWhile=action_recover}
private action_recover ::= !(';' | '|' | BEGIN | IDENT | STR_LIT | PREC | C_IDENT | START_TAIL)


tail_code ::= START_TAIL GO_CODE?
