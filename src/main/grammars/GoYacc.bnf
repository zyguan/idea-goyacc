{
    parserClass="idea.goyacc.ast.GoYaccParser"
    generate=[element-case="lower"]

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="GoYacc"
    psiPackage="idea.goyacc.psi"
    psiImplClassSuffix="Impl"
    psiImplPackage="idea.goyacc.psi.impl"
    psiImplUtilClass="idea.goyacc.psi.GoYaccPsiUtil"

    elementTypeHolderClass="idea.goyacc.psi.GoYaccType"
    elementTypeFactory="idea.goyacc.psi.GoYaccTypeFactory.newElementType"
    tokenTypeFactory="idea.goyacc.psi.GoYaccTypeFactory.newTokenType"

    tokens=[GO_CODE]
}


spec ::= decl_list rule_list tail_code?


decl_list ::= (token_decl | prec_decl | type_decl | start_decl | union_decl | code_decl | misc_decl)*

field ::= '<' IDENT '>' {pin=1 recoverWhile=type_recover}
private type_recover ::= !(IDENT)

private prec_word ::= LEFT | RIGHT | NONASSOC | PRECEDENCE
private decl_word ::= (prec_word | TOKEN | TYPE | START | UNION | LCURL | ERROR_VERBOSE)
private decl_recover ::= !(decl_word | START_RULES)

token_decl ::= TOKEN field? token_list {pin=1 recoverWhile=decl_recover}
prec_decl  ::= prec_word field? token_list {pin=1 recoverWhile=decl_recover}
type_decl  ::= TYPE field nonterminal_list {pin=1 recoverWhile=decl_recover}
union_decl ::= UNION BEGIN GO_CODE? END {pin=1 recoverWhile=decl_recover}
start_decl ::= START IDENT {pin=1 recoverWhile=decl_recover}
code_decl  ::= LCURL GO_CODE? RCURL {pin=1 recoverWhile=decl_recover}
misc_decl  ::= ERROR_VERBOSE {recoverWhile=decl_recover}

private token_list ::= token+ | token (',' token)*
token ::= token_name token_code? token_alias? {pin=1 recoverWhile=token_recover}
token_name ::= IDENT {
    implements="idea.goyacc.psi.GoYaccNamedElement"
    methods=[getName setName getNameIdentifier]
}
token_code ::= NUM_LIT
token_alias ::= STR_LIT {
    implements="idea.goyacc.psi.GoYaccNamedElement"
    methods=[getName setName getNameIdentifier]
}
private token_recover ::= !(',' | IDENT | decl_word | START_RULES)

private nonterminal_list ::= nonterminal+ | nonterminal (',' nonterminal)*
nonterminal ::= nonterminal_name nonterminal_note? {pin=1 recoverWhile=nonterminal_recover}
nonterminal_name ::= IDENT {methods=[getReference]}
nonterminal_note ::= STR_LIT
private nonterminal_recover ::= !(',' | IDENT | decl_word | START_RULES)


rule_list ::= START_RULES rule+ {pin=1}

rule ::= C_IDENT ':' rule_alt ('|' rule_alt)* {
    pin=2 recoverWhile=rule_recover
    implements="idea.goyacc.psi.GoYaccNamedElement"
    methods=[getName setName getNameIdentifier]
}
rule_alt ::= (rule_elem|rule_action)* rule_prec? rule_action? ';'? {recoverWhile=rule_alt_recover}
rule_elem ::= alias | symbol
rule_prec ::= PREC symbol {pin=1 recoverWhile=rule_prec_recover}
rule_action ::= BEGIN GO_CODE END {pin=1 recoverWhile=rule_action_recover}
alias  ::= STR_LIT {methods=[getReference]}
symbol ::= IDENT {methods=[getReference]}

private rule_recover ::= !(C_IDENT | START_TAIL)
private rule_alt_recover ::= !('|' | C_IDENT | START_TAIL)
private rule_prec_recover ::= !(';' | '|' | BEGIN | C_IDENT | START_TAIL)
private rule_action_recover ::= !(';' | '|' | BEGIN | C_IDENT | IDENT | PREC | START_TAIL | STR_LIT)


tail_code ::= START_TAIL GO_CODE? {pin=1}
